import java.awt.Window;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.RenderingHints.Key;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.Toolkit;
import java.beans.Expression;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import java.lang.Math;
import java.math.MathContext;
import java.time.Year;

import org.apache.commons.jexl2.JexlContext;
import org.apache.commons.jexl2.JexlEngine;
import org.apache.commons.jexl2.MapContext;
import org.apache.commons.math3.analysis.function.Multiply;
import org.omg.PortableInterceptor.IORInterceptor_3_0Holder;
import org.omg.PortableServer.THREAD_POLICY_ID;

import MyTuple.ThreeTuple;
import MyTuple.TwoTuple;



public class Main {
	
	public static void main(String[] args){
		JFrame jFrame = new JFrame("神经网络");
		jFrame.setBackground(Color.WHITE);
		jFrame.setVisible(true);
		jFrame.setMinimumSize(new Dimension(1080, 720));
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		jFrame.setLocation(screenSize.width/2-1080/2, screenSize.height/2-720/2);
		jFrame.setResizable(false);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		JPanel topJPanel = new JPanel();
		
		JTextArea expressionName = new JTextArea("表达式: ");
		JTextField expression = new JTextField("x*x",10);
		
		JTextArea layerName = new JTextArea("层数和节点数: ");
		JTextField layer = new JTextField("1,10,1",10);
		
		JTextArea exampleName = new JTextArea("样本数: ");
		JTextField example = new JTextField("50",10);
		
		JTextArea batchName = new JTextArea("迭代数: ");
		JTextField batch = new JTextField("800",10);
		
		JTextArea learning_rate_name = new JTextArea("学习速率");
		JTextField learning_rate = new JTextField("0.1",10);
		
		
		JButton button = new JButton("确定");
		
		
		topJPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
		topJPanel.setBackground(Color.WHITE);
		topJPanel.add(expressionName);topJPanel.add(expression);
		topJPanel.add(layerName);topJPanel.add(layer);
		topJPanel.add(exampleName);topJPanel.add(example);
		topJPanel.add(batchName);topJPanel.add(batch);
		topJPanel.add(learning_rate_name);topJPanel.add(learning_rate);
		topJPanel.add(button);
		
		
		JPanel jPanel = new JPanel();
		jPanel.setLayout(new GridLayout(2, 2));
		
		Loss loss = new Loss();
		JPanel func = new JPanel();
		Net net =new Net();
		loss.setBackground(Color.RED);
		func.setBackground(Color.BLUE);
		net.setBackground(Color.GRAY);
		
		
		JTextArea lossContext = new JTextArea();
		JScrollPane jScrollPane = new JScrollPane(lossContext);
		
		
		
		button.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
			
				MyThread myThread = new MyThread();
				myThread.expression = expression.getText();
				String temp = layer.getText();
				String[] temp1 = temp.split(",");
				int[] array = new int[temp1.length];
				for(int i=0;i<temp1.length;i++){
					array[i] = Integer.valueOf(temp1[i]);
					System.out.println(array[i]);
				}
				myThread.layer = array;
				myThread.dataNumber = Integer.valueOf(example.getText());
				myThread.batchNumber = Integer.valueOf(batch.getText());
				myThread.learning_rate = Double.valueOf(learning_rate.getText());
				System.out.println("样本数："+myThread.dataNumber);
				System.out.println("迭代数："+myThread.batchNumber);
				System.out.println("学习速率："+myThread.learning_rate);
				System.out.println("表达式："+myThread.expression);
				
				
				myThread.context = lossContext;
				myThread.net = net;
				myThread.loss = loss;
				
				myThread.start();
			}
		});
		
		jPanel.add(loss);jPanel.add(func);jPanel.add(net);jPanel.add(jScrollPane);
		
		
		
		jFrame.add(topJPanel,BorderLayout.NORTH);
		jFrame.add(jPanel,BorderLayout.CENTER);
		
		jFrame.pack();
		
		
	}
}
class Loss extends JPanel{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	public ArrayList<Double> x = new ArrayList<>();
	public int width = 540;
	public int height = 300;
	
	public void paint(Graphics graphics){
		super.paint(graphics);
		
		graphics.drawString("Loss", 20, 20);
		graphics.drawString("次数", 510, 290);
		graphics.drawLine(40, 280, 500, 280);
		graphics.drawString("0", 40, 295);
		graphics.drawString("200", 125, 295);
		graphics.drawLine(140, 275, 140, 280);
		graphics.drawString("400", 225, 295);
		graphics.drawLine(240, 275, 240, 280);
		graphics.drawString("600", 325, 295);
		graphics.drawLine(340, 275, 340, 280);
		graphics.drawString("800", 425, 295);
		graphics.drawLine(440, 275, 440, 280);
		graphics.drawLine(495, 275, 500, 280);
		graphics.drawLine(495, 285, 500, 280);
		
		graphics.drawLine(40, 40, 40, 280);
		graphics.drawLine(40, 40, 35, 45);
		graphics.drawLine(40, 40, 45, 45);
		graphics.drawString("0.5", 20, 220);
		graphics.drawLine(45, 220, 40, 220);
		graphics.drawString("1.0", 20, 160);
		graphics.drawLine(45, 160, 40, 160);
		graphics.drawString("1.5", 20, 100);
		graphics.drawLine(45, 100, 40, 100);
		
		
		for(int i=0;i<this.x.size();i++){
			int tempx = (i+1)/2 + 40;
			int tempy = (int) (280 - this.x.get(i)*120-1);
			graphics.drawOval(tempx, tempy, 1, 1);
			System.out.println("11111111");
		}
	}
	
}
class Net extends JPanel{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	public int[] layer = new int[0];
	public int width = 540;
	public int height = 300;
	public int radius = 10;
	public void paint(Graphics graphics){
		super.paint(graphics);
		int gapX = this.width/(this.layer.length+1);
		
		ArrayList<int[]> arrayList = new ArrayList<>();
		for(int i=0;i<layer.length;i++){
			int gapY = this.height/(this.layer[i]+1);
			for(int j=0;j<layer[i];j++){
				graphics.setColor(Color.black);
				graphics.fillOval((i+1)*gapX, (j+1)*gapY, this.radius, this.radius);
			}
			if(i>0){
				for(int j=0;j<layer[i];j++){
					for(int k=0;k<arrayList.size();k++){
						graphics.drawLine((i+1)*gapX+this.radius/2, (j+1)*gapY+this.radius/2, arrayList.get(k)[0], arrayList.get(k)[1]);
					}
				}	
			}
			arrayList = new ArrayList<>();
			for(int j=0;j<layer[i];j++){
				int[] t = new int[2];
				t[0] = (i+1)*gapX+this.radius/2;t[1] = (j+1)*gapY+this.radius/2;
				arrayList.add(t);
			}
		}
		
	}
}
class MyThread extends Thread{
	public String expression;
	public int[] layer;
	public int dataNumber;
	public int batchNumber;
	public double learning_rate;
	public MyNeuralNetwork myNeuralNetwork = new MyNeuralNetwork();
	public JTextArea context;
	public Net net;
	public Loss loss;
	public void run(){
		net.layer = this.layer;
		net.repaint();
		
		loss.repaint();
		
		Controller controller = new Controller(this.expression, this.dataNumber, 
				this.batchNumber, this.learning_rate, this.layer);
		
		double cost;
		this.context.setText("");
		String string = "";
		ArrayList<Double> arr = new ArrayList<>();
		for(int i=0;i<this.batchNumber;i++){
			cost = controller.runOneBatch();
			System.out.println(i+": "+cost);
			string +="迭代" + i + ": "+cost+'\n';
			this.context.setText(string);
			arr.add(cost);
			loss.x = arr;
			loss.repaint();
 		}
		MyArray temp = controller.test(controller.data);
		for(int i=0;i<controller.data.getColumns();i++){
			System.out.println("target: "+controller.Y.getNumber(0, i)+"  test: "+temp.getNumber(0,i));
		}
	}
}


