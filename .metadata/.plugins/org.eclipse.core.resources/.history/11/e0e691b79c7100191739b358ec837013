import java.lang.reflect.Array;
import java.lang.reflect.Parameter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import MyTuple.ThreeTuple;
import MyTuple.TwoTuple;

public class MyNeuralNetwork {
	
	private static MyNumPy np = new MyNumPy();
	
	public static Map<String, MyArray> initializeParametersDeep(int[] layer_dims){
		/**
		 * 参数：
		 * layer_dims -- 表示每层单元个数的一维数组
		 * 
		 * 返回值：
		 * parameters -- 用于存放参数的字典 "W1","b1",...,"WL","bL"
		 * 		Wl -- 大小为 (layer_dims[l], layer_dims[l-1])的矩阵
		 * 		bl -- 大小为 (layer_dims[l], 1)的偏差向量
		 */
		np.random.setSeed(3);
		Map<String, MyArray> parameters = new HashMap<>();
		int L = layer_dims.length;
		for(int i=1;i<L;i++){
			parameters.put("W"+String.valueOf(i), np.random.randn(layer_dims[i],layer_dims[i-1]).mult(0.1));
			parameters.put("b"+String.valueOf(i), np.zeros(layer_dims[i],1));
		}
		return parameters;
	}

	public static TwoTuple<MyArray, ThreeTuple<MyArray, MyArray, MyArray>> 
									linear_forward(MyArray A,MyArray W,MyArray b){
		
		/**
		 * 一个层前向传播的线性部分
		 * 参数
		 * A -- 上一层的a值 (size of previous layer, number of examples)
		 * W -- 当前层的权重(size of current layer, size of previous layer)
		 * b -- bias vector (size of the current layer, 1)
		 */
		
		return null;
	}
}
